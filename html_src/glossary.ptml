<html>
    <head>
<!--include head.txt -->
        <title>
            C++ Glossary
        </title>
    </head>

    <body>
<!--include logo.txt -->
<!--include menu.txt -->
        <h1>
            C++ Glossary
        </h1>

        <p>
        Here are some important OOP/C++ terms:
        </p>

        <ul>
            <li>
                <a name="assignmentoperator">
                <span class="hilight">assignment operator</span>:
                </a>
                overriding the assignment operator for a class changes what
                <span class="code">=</span> does when used with members of
                that class.
            </li>

            <li>
                <a name="big3">
                <span class="hilight">big 3</span>:
                </a>
                the main three elements of copy control: the assignment
                operator, the copy constructor, and the destructor.
            </li>

            <li>
                <a name="compile">
                <span class="hilight">compile</span>:
                </a>
                turning source code into machine code.
            </li>

            <li>
                <a name="constructor">
                <span class="hilight">constructor</span>:
                </a>
                the class method that initializes an object of that class.
            </li>

            <li>
                <a name="copyconstructor">
                <span class="hilight">copy constructor</span>:
                </a>
                the class method that initializes an object of that class
                <i>when it is being copied from another instance of that
                    class</i>.
            </li>

            <li>
                <a name="destructor">
                <span class="hilight">destructor</span>:
                </a>
                the class method that cleans up an object of that class.
            </li>

            <li>
                <a name="functionprototype">
                <span class="hilight">function prototype</span>:
                </a>
                code that just shows the return type, parameter types,
                and <span class="code">const</span> status of a function,
                but does not include the body of the function (what it actually
                does).
            </li>

            <li>
                <a name="memo-ization">
                <span class="hilight">memo-ization</span>:
                </a>
                storing results in
                some data structure rather than calculating them again and
                again.
            </li>

            <li>
                <a name="overloading">
                <span class="hilight">overloading</span>:
                </a>
                to create more than one function or operator with
                the same name, but a different type signature.
                For instance, '+' can add two integers, but it can also 
                add two doubles or two strings.
            </li>

            <li>
                <a name="pointer">
                <span class="hilight">pointer</span>:
                </a>
                a variable that holds a memory address.
                In C++, pointers are typed.
            </li>

            <li>
                <a name="polymorphism">
                <span class="hilight">polymorphism</span>:
                </a>
                also called "dynamic binding." Polymorphism describes the
                ability, present in some languages, to accept a pointer or
                reference to a base-type object, and yet successfully invoke
                the proper method in a derived-class object being referenced.
                In C++, polymorphism can be turned on by using the reserved
                word `virtual` on a method in a class.
            </li>

            <li>
                <a name="reference">
                <span class="hilight">reference</span>:
                </a>
                a "smarter" pointer that is de-referenced each time it is used.
                <br />
                <a
                    href="https://en.wikipedia.org/wiki/Reference_(C%2B%2B)">More
                on C++ references</a>. 
            </li>

            <li>
                <a name="statictyping">
                <span class="hilight">static typing</span>:
                </a>
                the assignment of a type to a variable once, at compile time,
                rather than <i>dynamically</i>, at run time.
            </li>

            <li>
                <a name="struct">
                <span class="hilight">struct</span>:
                </a>
                A C++ construct that can hold both data values and
                functions (called <i>methods</i>). It differs from a
                <i>class</i> in that the members of a struct are public by
                default. In practice, coders most often use
                <span class="code">struct</span>
                when they don't intend to write any methods.
            </li>

            <li>
                <a name="vector">
                <span class="hilight">vector</span>:
                </a>
                In C++, a class in the <i>Standard Template Library</i>
                that allows random, constant-time access to a collection of
                items of some specific type, and holds those items in a
                determinate order.
            </li>
        </ul>
    </body>
</html>
