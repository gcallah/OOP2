<html>
    <head>
<!--include head.txt -->
        <title>
            The Big 3
        </title>
    </head>

    <body>
<!--include logo.txt -->
<!--include menu.txt -->
        <h1>
            The Big 3
        </h1>

        <p>
        Copy control is a very important concept in C++ because it 
        involves the creation and deletion of objects (after 
        all, this course is called Object Oriented Programming). 
        You have dealt with constructors in Python but maybe it
        was not explicitly stated; every time you make an __init__ method 
        for your objects/class in Python, you have made
        a constructor for the object/class. 
        When you assign a class's name followed by parenthesis to a variable 
        in Python (for example if you have a class called
        <span class="code">BinarySearchTree</span> 
        and you write <span class="code">myObject = BinarySearchTree()</span>)
        you have called the class's constructor. 
        </p>

        <p>
        However, in C++, we take the creation of objects one step further; 
        we are now concerned about allocating and deallocating memory 
        because we directly tell the compiler through our code when and 
        how to allocate memory. 
        We did not have to worry about the deallocation of memory in Python 
        because Python automatically calls its 
        <i>garbage collector</i> when needed. 
        In C++ we often associate three language features
        with copy control:
        <a href="glossary.html#destructors">destructors</a>,
        <a href="glossary.html#copyconstructor">copy constructors</a>,
        and <a href="glossary.html#assignmentoperators">assignment
            operators</a>.
        We will call these the Big 3
        because often times 
        when you need to write any one of 
        them, you most likely will need to write the other two.
        </p>

        <p>
        Here are the topics we will cover in this unit:
        </p>

        <ul>
            <li>
                <a href="glossary.html#destructor">
                    Destructors
                </a>
                <br />
                    The purpose of the destructor is to destory items 
                    that are allocated onto the heap. The syntax follows that 
                    of the constructor except in the function 
                    name it starts with a tilde
                    followed by the class name. You never call the destructors 
                    yourself; instead the compiler calls it when the object is 
                    not needed, when you go out of scope, or in other words,
                    when everything in the callstack is done.   
                <br />
            </li>

            <li>
                <a href="glossary.html#copyconstructor">
                    Copy Constructor
                </a>
                <br />
                    The purpose of the copy constructor does 
                    what its name is; it 
                    creates a new object based on an existing object. 
                    The syntax for this
                    is the syntax for the constructor except an 
                    object of the same type
                    is passed in usually by constant reference. 
                    To "copy" the object,
                    you first allocate memory for the data members. 
                    Then you initialize 
                    those data members to be the same as the 
                    data members of the referenced 
                    object. 
                <br />

                <br />
                Taken from 
                <a href= "http://cis.poly.edu/jsterling/cs2124/LectureNotes/06.Big3.html">
                Sterling's notes </a>
                the Copy Constructor is called in 3 instances: 
                <br />
                1)
                <br />
                    <span class = "code"> SomeClass a; </span>
                <br />
                    <span class = "code"> SomeClass b(a); </span>
                <br />
                2)
                <br />
                    <span class = "code"> SomeClass a; </span>
                <br />
                    <span class = "code"> SomeClass b = a; </span>
                <br />
                3)
                <br />
                    <span class = "code"> void someFunc(SomeClass passedByValue) {}
                    </span>
                <br />
                4)
                <br />
                    <span class = "code"> SomeClass anotherFunc () 
                        { SomeClass returnedByValue; return returnedByValue; }
                    </span>
                <br />

                In the first two lines, the copy constructor is called 
                because you create a new object from an existing object with a 
                matching type. 
                <br />
                In the third line, the copy constructor is called because 
                you pass an object by value which creates a copy of that 
                object. 
                <br />
                In the fourth line, the copy constructor 
                is called because your return
                by value (so you make a new object 
                that is a copy of that specific value / object)
            </li>

            <li>
                <a href="glossary.html#assignmentoperator">
                Assignment Operator
                </a>
                <br />
                    The purpose of the assignment operator is to 
                    set an existing object to be the 
                    same as another existing object of the same type. 
                    It should first remove or delete the items
                    stored in the object's data members, 
                    allocate memory for the new 
                    items, then copy the other object's data 
                    members to the current object.
                    You should also check for self-assignment 
                    (assiging an object to itself) 
                    and at the end of the function, return the object. 
                <br/>
                    The assignment operator is called when you set 
                    an existing object equal to an existing object of 
                    the same type.
                    <br />
                    For example:
                    <br />
                    <span class = "code">
                    SomeClass a;
                    <br />
                    SomeClass b;
                    <br />
                    a = b;
                    </span>

                <br />
                You might be wondering, why should the assignment operator have
                a return type? Well, it should have a return type because 
                sometimes you want to chain assignment operators. For example: 
                <br />
                <span class = "code">
                    SomeClass a;
                    <br />
                    SomeClass b;
                    <br />
                    SomeClass c;
                    a = b = c;
                </span>
                <br />
                Had we not made it return a type (or in other words 
                we made the return type void), the last 
                line will not compile.   
            </li>
        </ul>
        <br />
        <p>
        However, do note that we will have to take additional steps 
        in regards to copy control with inheritance, 
        which will be discussed when we reach the topic of inheritance.  
        </p>

        <h3>
            Code
        </h3>

        <p>
            The file <a href="my_vec.html">my_vec.cpp</a> implements the 
            big 3 for our own vector class.
        </p>


    </body>
</html>
