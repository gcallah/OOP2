<html>
    <head>
<!--include head.txt -->
        <title>
            Iterators
        </title>
    </head>

    <body>
<!--include logo.txt -->
<!--include menu.txt -->
        <h1>
            Iterators
        </h1>
        <h3>
            What are iterators?
        </h3>

        <p>
            Iterators are objects that allow access to the data
            structure with which they are associated, in a standard
            way. Typically, that access is sequential, although
            <span class="code">RandomAccessIterator</span> also
            is available.
        </p>

        <p>
            Here is a video discussing the general idea of iterators...
            the code is in Java, but it is a good explanation of what
            iterators are <i>for</i>, whatever language we are
            using them in:
        </p>

        <figure>
            <iframe width="560" height="315"
                src="https://www.youtube.com/embed/VKIzUuMdmag"
                frameborder="0"
                allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
            </iframe>
            <figcaption>
                The iterator design pattern
            </figcaption>
        </figure>

        <h3>
            Ranged for loops with iterators
        </h3>

        <p>
            In our course, we will first use iterators to allow
            the implementation of ranged-for loops for collections. 
            For this, our iterator class should implement 3 methods:
            an equality operator, a dereference operator, and an
            increment operator. The iterator should also store a way to
            access the current value in the collection,
            and have a constructor.
        </p>

        <h3>
            begin and end
        </h3>
        <p>
            The collection that utilizes the iterator should have 2 other
            methods: <span class="code">begin()</span> and <span
                class="code">end()</span>.
            <span class="code">begin()</span> should return an iterator
            that, when de-referenced, yields the first element 
            of the collection, and <span class="code">end()</span>
            should return an iterator that signals that the end
            of the collection has been reached.
            <span class="code">begin()</span>
            and <span class="code">end()</span> define a 
            half-open range which is 
            inclusive on the side of <span class="code">begin()</span>
            and exclusive on <span class="code">end()</span>. 
            Once you reach the <span class="code">end()</span>, 
            you know that you are out of bounds and should stop iterating.
        </p>

        <h3>
            Declaring STL iterators
        </h3>
        <p>
            Many of the
            <a href="glossary.html#stl">Standard Template Library</a>
            algorithms take iterators as arguments to indicate
            where an algorithm should begin and end its work.
            For instance, <span class = "code">find</span>
            will look for an item within the range given by 
            the begin and end arguments. This means one can 
            search the entire collection for the value sought, 
            or any contiguous subset of the collection.
            If you import an STL container 
            you can specify its 
            iterator by writing <span class = "code">"::iterator"</span>
            after the STL class name. 
            For example, to specify the iterator for a vector of characters,
            you would write: <span class = "code">"vector&lt;char&gt;::iterator"
            </span>.
        </p>

        <p>
            If you want to treat the item an iterator returns
            when de-referenced as constant, you can instead use:
            <span class = "code">"::const_iterator"</span>
        </p>

        <h3>
            External Links
        </h3>
        <ul class="nested">
            <li>
                <a href="https://www.fluentcpp.com/2018/05/08/std-iterator-deprecated/">
                std::iterator deprecated
                </a>
            </li>

        </ul>
    </body>
</html>
