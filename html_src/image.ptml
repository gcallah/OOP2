<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
        code/weather/image.cpp
        </title>
    </head>
    <body>
<!--include logo.txt -->
<!--include menu.txt -->
        <h1>
        code/weather/image.cpp
        </h1>

                <pre>
                <code>
<span class="c1">// Copyright 2019 Gene Callahan</span>

</code>                </pre>
                <p>
  This is the implementation of our image class.
  It is designed to teach class hierarchy and buffer
  allocation.

                </p>

                <pre>
                <code>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#include</span> <span class="cpf">&quot;./image.h&quot;</span><span class="cp"></span>

</code>                </pre>
                <p>
  "Ordinary" constructor initializing each field:

                </p>

                <pre>
                <code>
<span class="n">Image</span><span class="o">::</span><span class="n">Image</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">flnm</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">width</span><span class="p">(</span><span class="n">width</span><span class="p">),</span> <span class="n">height</span><span class="p">(</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">image_buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">image_sz</span><span class="p">()];</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  This is the <span class="code">Image</span> <i>copy constructor</i>. We have to handle 
  properly copying the <span class="code">image_buf</span> to the target object.
  We use <span class="code">copy_fields()</span> so we can share copy code with the
  assignment operator.

                </p>

                <pre>
                <code>
<span class="n">Image</span><span class="o">::</span><span class="n">Image</span><span class="p">(</span><span class="k">const</span> <span class="n">Image</span><span class="o">&amp;</span> <span class="n">img2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;In image copy constructor</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="n">copy_fields</span><span class="p">(</span><span class="n">img2</span><span class="p">);</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  <span class="code">Image</span> <i>destructor</i> must <i>free</i> the image buf so
  that the memory can be used for other purposes.

                </p>

                <pre>
                <code>
<span class="n">Image</span><span class="o">::~</span><span class="n">Image</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image_buf</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">image_buf</span><span class="p">;</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  The <span class="code">Image</span> assignment operator has to delete the image buf is
  not null, then do the copy like the <i>copy constructor</i>.

                </p>

                <pre>
                <code>
<span class="n">Image</span><span class="o">&amp;</span> <span class="n">Image</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Image</span><span class="o">&amp;</span> <span class="n">img2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image_buf</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">image_buf</span><span class="p">;</span>
    <span class="n">copy_fields</span><span class="p">(</span><span class="n">img2</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  This is the base class <span class="code">display()</span> operator, to illustrate
  <i>polymorphism</i>.

                </p>

                <pre>
                <code>
<span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">Image</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">Image</span><span class="o">::</span><span class="n">image_sz</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">;</span> <span class="p">}</span>

</code>                </pre>
                <p>
  We extract the copy into its own method so that it can be shared
  by the copy constructor and assignment.

                </p>

                <pre>
                <code>
<span class="kt">void</span> <span class="n">Image</span><span class="o">::</span><span class="n">copy_fields</span><span class="p">(</span><span class="k">const</span> <span class="n">Image</span><span class="o">&amp;</span> <span class="n">img2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">img2</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
    <span class="n">height</span> <span class="o">=</span> <span class="n">img2</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
    <span class="n">image_buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">image_sz</span><span class="p">()];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">image_sz</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">image_buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">img2</span><span class="p">.</span><span class="n">image_buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  Correct way to call base class copy constructor:
Gif::Gif(const Gif& img2) : Image(img2) {
}

                </p>

                <pre>
                <code>

</code>                </pre>
                <p>
  Incorrect way to call it:
Gif::Gif(const Gif& img2) {
    Image(img2);
}

                </p>

                <pre>
                <code>

</code>                </pre>
                <p>
  Specialized over-riding display method for Gif.
  In it we call the parent display method with
  <span class="code">Image::display()</span>.

                </p>

                <pre>
                <code>
<span class="c1">//string Gif::display(string s) { </span>
<span class="c1">//    return Image::display(&quot;Gif&quot;);</span>
<span class="c1">//}</span>

</code>                </pre>
                <p>
  Gif has its own <span class="code">compress()</span> with an int parameter.
  It will hide the base class <span class="code">compress()</span> unless we
  explicitly prevent it from doing so.

                </p>

                <pre>
                <code>
<span class="kt">void</span> <span class="n">Gif</span><span class="o">::</span><span class="n">compress</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;compressing at level: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">AnimGif</span><span class="o">::</span><span class="n">AnimGif</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">flnm</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">Gif</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">flnm</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">image_buf2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">image_sz</span><span class="p">()];</span>
<span class="p">}</span>

<span class="n">AnimGif</span><span class="o">::</span><span class="n">AnimGif</span><span class="p">(</span><span class="k">const</span> <span class="n">AnimGif</span><span class="o">&amp;</span> <span class="n">img2</span><span class="p">)</span> <span class="o">:</span> <span class="n">Gif</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;In AnimGif copy constructor</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="n">image_buf2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">image_sz</span><span class="p">()];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">image_sz</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">image_buf2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">img2</span><span class="p">.</span><span class="n">image_buf2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>
<span class="n">AnimGif</span><span class="o">&amp;</span> <span class="n">AnimGif</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">AnimGif</span><span class="o">&amp;</span> <span class="n">img2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Gif</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">img2</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image_buf2</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">image_buf2</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">image_sz</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">image_buf2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">img2</span><span class="p">.</span><span class="n">image_buf2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">AnimGif</span><span class="o">::~</span><span class="n">AnimGif</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image_buf2</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">image_buf2</span><span class="p">;</span>
<span class="p">}</span>
</code>                </pre>
                <p>
  Specialized over-riding display method for AnimGif.
  In it we call the parent display method with
  <span class="code">Image::display()</span>.

                </p>

                <pre>
                <code>
<span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">AnimGif</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Image</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="s">&quot;AnimGif&quot;</span><span class="p">);</span>
<span class="p">}</span>


</code>                </pre>
                <p>
  Specialized over-riding display method for Jpeg.
  In it we call the parent display method with
  <span class="code">Image::display()</span>.

                </p>

                <pre>
                <code>
<span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">Jpeg</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Image</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="s">&quot;Jpeg&quot;</span><span class="p">);</span>
<span class="p">}</span>

</code>                </pre>
                <p>
  Specialized over-riding display method for Png.
  In it we call the parent display method with
  <span class="code">Image::display()</span>.

                </p>

                <pre>
                <code>
<span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">Png</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Image</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="s">&quot;Png&quot;</span><span class="p">);</span>
<span class="p">}</span>
</code>                </pre>

    </body>
</html>

